<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestión de Paquetes</title>
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <style>
    :root {
      --primary: #4CAF50;
      --primary-hover: #388E3C;
      --gray-light: #f4f4f4;
      --gray-dark: #333;
      --radius: 10px;
      --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: white;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      color: var(--gray-dark);
      min-height: 100vh;
    }

    h1 {
      margin-bottom: 40px;
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--gray-dark);
    }

    .form-section {
      background: white;
      padding: 30px;
      border-radius: var(--radius);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 700px;
      transition: transform 0.3s ease;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      font-weight: 600;
      display: block;
      margin-bottom: 6px;
    }

    input, select, textarea {
      width: 100%;
      padding: 10px 12px;
      border: 1px solid #ccc;
      border-radius: var(--radius);
      font-size: 14px;
      box-sizing: border-box;
      transition: border 0.2s ease;
    }

    input:focus, select:focus, textarea:focus {
      border-color: var(--primary);
      outline: none;
    }

    button {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 12px 20px;
      font-size: 16px;
      border-radius: var(--radius);
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    button:hover {
      background-color: var(--primary-hover);
    }

    table {
      background: white;
      width: 100%;
      max-width: 700px;
      border-collapse: collapse;
      margin-top: 40px;
      box-shadow: var(--shadow);
      border-radius: var(--radius);
      overflow: hidden;
    }

    th, td {
      padding: 14px;
      text-align: left;
    }

    th {
      background-color: var(--primary);
      color: white;
    }

    tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    .error-message {
      color: #e53935;
      font-size: 12px;
      margin-top: 4px;
    }

    .error-field {
      border-color: #e53935 !important;
    }

    #toast {
      position: fixed;
      top: 20px;
      right: 20px;
      background: var(--primary);
      color: white;
      padding: 14px 20px;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      display: none;
      z-index: 1000;
    }

    /* Estilos para manejar las secciones ocultas */
    .hidden {
      display: none;
    }
    .active-section {
      display: block;
    }
  </style>
</head>
<body>
  <h1>Gestión de Paquetes</h1>

  <div id="authSection" class="active-section">
    <div class="form-section" id="loginSection">
      <h2>Iniciar sesión</h2>
      <form id="loginForm">
        <div class="form-group">
          <label for="loginUsername">Usuario</label>
          <input type="text" id="loginUsername" name="username" required>
        </div>
        <div class="form-group">
          <label for="loginPassword">Contraseña</label>
          <input type="password" id="loginPassword" name="password" required>
        </div>
        <button type="submit">Iniciar sesión</button>
        <div id="loginError" class="error-message"></div>
      </form>
      <p>¿No tienes cuenta? <a href="#" onclick="showSignup()">Regístrate aquí</a></p>
    </div>

    <div class="form-section hidden" id="signupSection">
      <h2>Registrarse</h2>
      <form id="signupForm">
        <div class="form-group">
          <label for="signupUsername">Usuario</label>
          <input type="text" id="signupUsername" name="username" required>
        </div>
        <div class="form-group">
          <label for="signupPassword">Contraseña</label>
          <input type="password" id="signupPassword" name="password" required>
        </div>
        <button type="submit">Registrarse</button>
        <div id="signupError" class="error-message"></div>
      </form>
      <p>¿Ya tienes cuenta? <a href="#" onclick="showLogin()">Inicia sesión aquí</a></p>
    </div>
  </div>

  <div id="packagesSection" class="hidden">
    <div class="form-section">
      <h2>Registrar Nuevo Paquete</h2>
      <form id="packageForm">
        <div class="form-group">
          <label for="apartment_number">Número de departamento</label>
          <input type="text" id="apartment_number" name="apartment_number" required>
        </div>

        <div class="form-group">
          <label for="sender">Remitente</label>
          <input type="text" id="sender" name="sender" required>
        </div>

        <div class="form-group">
          <label for="delivery_date">Fecha de entrega</label>
          <input type="date" id="delivery_date" name="delivery_date" required>
        </div>

        <div class="form-group">
          <label for="status">Estado</label>
          <select id="status" name="status" required>
            <option value="">-- Selecciona estado --</option>
            <option value="pendiente">Pendiente</option>
            <option value="entregado">Entregado</option>
            <option value="retirado">Retirado</option>
          </select>
        </div>

        <div class="form-group">
          <label for="qr_code">Código QR</label>
          <input type="text" id="qr_code" name="qr_code">
        </div>

        <div class="form-group">
          <label for="notes">Notas (opcional)</label>
          <textarea id="notes" name="notes" rows="3"></textarea>
        </div>

        <button type="submit">Registrar Paquete</button>
      </form>
      <div id="toast">Paquete registrado con éxito!</div>
    </div>

    <h2>Lista de Paquetes</h2>
    <table id="packagesTable">
      <thead>
        <tr>
          <th>ID</th>
          <th>Departamento</th>
          <th>Remitente</th>
          <th>Fecha Entrega</th>
          <th>Estado</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
    <button onclick="logout()" style="margin-top: 20px;">Cerrar sesión</button>
  </div>

  <script>
    const API_URL = 'http://localhost:8000/api/packages';

    // Funciones para cambiar entre secciones
    function showSignup() {
      document.getElementById('loginSection').classList.add('hidden');
      document.getElementById('signupSection').classList.remove('hidden');
    }

    function showLogin() {
      document.getElementById('signupSection').classList.add('hidden');
      document.getElementById('loginSection').classList.remove('hidden');
    }

    function showPackagesSection() {
      document.getElementById('authSection').classList.add('hidden');
      document.getElementById('packagesSection').classList.remove('hidden');
      loadPackages();
    }

    function logout() {
      localStorage.removeItem('authToken');
      document.getElementById('packagesSection').classList.add('hidden');
      document.getElementById('authSection').classList.remove('hidden');
      showLogin();
    }
    document.addEventListener("DOMContentLoaded", function() {
      const authToken = localStorage.getItem('authToken');
      if (!authToken) {
        document.getElementById('authSection').classList.remove('hidden');
        document.getElementById('packagesSection').classList.add('hidden');
      } else {
        showPackagesSection(); // Si hay un token, muestra la sección de paquetes
      }
    });
    
    async function loadPackages() {
      try {
        const response = await fetch('/api/packages');
        if (!response.ok) throw new Error(await response.text());

        const packages = await response.json();
        const tbody = document.querySelector('#packagesTable tbody');
        tbody.innerHTML = packages.map(pkg => `
          <tr>
            <td>${pkg.id}</td>
            <td>${pkg.apartment_number}</td>
            <td>${pkg.sender}</td>
            <td>${new Date(pkg.delivery_date).toLocaleDateString()}</td>
            <td>${pkg.status}</td>
            <td>
              ${pkg.status === 'pendiente' ?
                `<button onclick="updatePackageStatus(${pkg.id}, 'retirado')">Marcar como retirado</button>` :
                ''}
            </td>
          </tr>
        `).join('');
      } catch (error) {
        console.error("Error al cargar paquetes:", error);
      }
    }

    async function updatePackageStatus(id, newStatus) {
      try {
        const response = await fetch(`/api/packages/${id}/status`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: newStatus })
        });

        if (response.ok) {
          loadPackages(); // Recargar la lista
        }
      } catch (error) {
        console.error("Error al actualizar:", error);
      }
    }

    // Modifica el login para redirigir
    document.getElementById("loginForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const errorElement = document.getElementById("loginError");
      errorElement.textContent = "";

      const username = document.getElementById("loginUsername").value;
      const password = document.getElementById("loginPassword").value;

      try {
        const response = await fetch("/api/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ username, password }),
        });

        const result = await response.json();
        if (response.ok) {
          if (result.token) {
            localStorage.setItem('authToken', result.token);
          }
          showPackagesSection();
        } else {
          errorElement.textContent = result.error || "Credenciales inválidas";
        }
      } catch (error) {
        errorElement.textContent = "Error de conexión";
        console.error(error);
      }
    });

    document.getElementById("signupForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const errorElement = document.getElementById("signupError");
      errorElement.textContent = "";
    
      const formData = {
        username: document.getElementById("signupUsername").value.trim(),
        password: document.getElementById("signupPassword").value.trim()
      };
    
      try {
        const response = await fetch("/api/signup", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify(formData)
        });
    
        const result = await response.json();
        
        if (!response.ok) {
          throw new Error(result.error || "Error en el registro");
        }
        
        showToast("¡Registro exitoso! Por favor inicia sesión");
        showLogin();
    
      } catch (error) {
        console.error("Error en registro:", error);
        errorElement.textContent = error.message;
        errorElement.style.color = "red";
        errorElement.style.marginTop = "10px";
      }
    });
      // Función para mostrar el toast
function showToast(message) {
  const toast = document.getElementById('toast');
  toast.textContent = message;
  toast.style.display = 'block';
  
  setTimeout(() => {
    toast.style.display = 'none';
  }, 3000); // El toast desaparecerá después de 3 segundos
}
  </script>
</body>
</html>